<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" 
           xmlns:soae-fault="http://www.intel.com/soae/bpelFault-2009a/" 
           targetNamespace="http://www.intel.com/soae/bpelFault-2009a/" 
           elementFormDefault="unqualified">

  <xs:include schemaLocation="soaeBpelFault.xsd" />

  <!-- ========================================================================

    Defines the soae bpel faults that can be generated by content-attack-prevention 
    extension functions.
    
    ======================================================================== -->

  <xs:element name="contentAttackPreventionFault" type="soae-fault:ContentAttackPreventionFault">
    <xs:annotation>
      <xs:documentation xml:lang="en">Content attack check failure</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:complexType name="ContentAttackPreventionFault">
    <xs:complexContent>
      <xs:restriction base="soae-fault:Fault">
        <xs:sequence>
          <xs:group ref="soae-fault:foundation"/>
          <xs:element name="details">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="policy" type="xs:string"/>
                <xs:element name="writeTransactionLog" type="xs:boolean"/>
                <xs:element name="reject" type="xs:boolean"/>
                <xs:element name="type" type="soae-fault:ContentAttackPreventionType"/>

                <!-- More detailed information is available for some kinds of Content Attacks.

                     In some cases (e.g. attachment counte exceeded) no detailed
                     information is available from the bpel fault: only the "type" element
                     which gives general information. You must look in the exception log
                     for more information. 

                     Query parameter and header receive special treatment since there may
                     be many query parameters or headers, so it is a convenience to the site
                     to identify the one which is failing.
                -->
 
                <xs:choice>
                  <xs:sequence minOccurs="0">
                    <!--
                       This sequence is for Content Attack SchemaValidation faults only.  

                       It now support more than one options for schema-id and component-id
                    -->
                    <xs:element name="schema-id-kind" type="xs:string"/>
                    <xs:element name="schema-id" type="xs:string"/>
                    <xs:element name="component-kind" type="xs:string"/>
                    <xs:element name="component-id" type="xs:string"/>
                  </xs:sequence>
 
                  <xs:sequence>
                    <!--
                       This sequence is for Content Attack SoapHeaderValidation faults only.  
                    -->
                    <xs:element name="uri" type="xs:string" />
                    <xs:element name="localName" type="xs:string" />
	          </xs:sequence>

                  <xs:sequence>
                    <xs:element name="httpQueryParameter" type="xs:string" />
	          </xs:sequence>

                  <xs:sequence>
                    <xs:element name="httpHeader" type="xs:string" />
                  </xs:sequence>

                  <xs:sequence>
                    <xs:element name="wsaElement" type="xs:string" />
                  </xs:sequence>

                  <xs:sequence>
	              <xs:element name="json" type="xs:string" />
                  </xs:sequence>

                  <xs:sequence>

                    <!-- This sequence is for other content based other Content Attack Prevention faults.
                         (e.g. xml limits, forbidden regex, required regex, and forbidden words 
                      -->
  
                    <!-- This element is for items which can identify a specific 
                         element or attribute as violating the Content Attack Policy,
                         such as ForbiddenWord, ForbiddenRegularExpressssion,
                         SqlInjection.

            		 A traceback string looks like this:

			    /doc/a1[elem child #3]/a2[elem child #2]/a3[elem child #1]
               	    -->

                    <xs:element name="traceback" type="xs:string" minOccurs="0"/>

                    <!-- This element is for items which have a user-defined test
                         name because there is more than one test of the same type.
                         For example, ForbiddenRegularExpression, RequiredRegularExpression,
                         and ForbiddenWord (the word itself is the test name).
                    -->

                    <xs:element name="userDefinedTestName" type="xs:string" minOccurs="0"/>

                  </xs:sequence>
		</xs:choice>

		<xs:element name="faultEnum" >
                  <xs:simpleType>
	              <xs:restriction base="soae-fault:FaultEnum" >
                        <xs:enumeration value="CAP-policy-load-failure" />
                        <xs:enumeration value="CAP-policy-compilation-failure" />
			<xs:enumeration value="schema-load-failure" />
			<xs:enumeration value="schema-compilation-failure" />
                        <xs:enumeration value="general-CAP-inspection-failure" />
                     </xs:restriction>
                  </xs:simpleType>
                </xs:element>
		<xs:element name="desc" type="xs:string"/>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:simpleType name="ContentAttackPreventionType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="XmlLimits"/>
      <xs:enumeration value="JsonLimits" />
      <xs:enumeration value="InvalidJson" />
      <xs:enumeration value="SchemaValidation"/>
      <xs:enumeration value="ForbiddenDTD"/>
      <xs:enumeration value="SqlInjection"/>
      <xs:enumeration value="XPathInjection"/>
      <xs:enumeration value="RequiredRegularExprssion"/>
      <xs:enumeration value="ForbiddenRegularExpression"/>
      <xs:enumeration value="ForbiddenWord"/>
      <xs:enumeration value="IsVirusCheckRequested"/>
      <xs:enumeration value="GetVirusChecks"/>
      <xs:enumeration value="HttpProtocolVersion"/>
      <xs:enumeration value="HttpMethod"/>
      <xs:enumeration value="HttpQueryParameter"/>
      <xs:enumeration value="HttpHeader"/>
      <xs:enumeration value="HttpPath"/>
      <xs:enumeration value="HttpContentType"/>
      <xs:enumeration value="HttpOther"/>
      <xs:enumeration value="ClientIpAddress"/>
      <xs:enumeration value="SoapCheck"/>
      <xs:enumeration value="SoapHeaderValidation" />
      <xs:enumeration value="WSAIpAddress"/>
      <xs:enumeration value="WSAOther"/>
      <xs:enumeration value="Virus"/>
      <xs:enumeration value="AttachmentRequired" /> 
      <xs:enumeration value="AttachmentForbidden" /> 
      <xs:enumeration value="AttachmentLength" /> 
      <xs:enumeration value="AttachmentCount" /> 
      <xs:enumeration value="AttachmentOther" /> 
      <xs:enumeration value="MessageLength" /> 
      <xs:enumeration value="Utf8XmlCheck" />
      <xs:enumeration value="EmptyNodeSet" />

      <!-- The type "Other" will be reported by the CAP workflow activity
           when there is a catchAll for a CAP workflow fault
           which does not match any of the expected workflow faults.
      -->

      <xs:enumeration value="Other" />
    </xs:restriction>
  </xs:simpleType>

</xs:schema>
