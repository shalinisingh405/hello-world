<?xml version="1.0"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" 
           xmlns="http://www.intel.com/soae/logSchema-2007a.xsd" 
           targetNamespace="http://www.intel.com/soae/logSchema-2007a.xsd">

  <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->

  <xs:simpleType name="MoId">
    <xs:annotation>
      <xs:documentation>Managed Object IDentifier</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string"/>
  </xs:simpleType>

  <xs:simpleType name="Duration">
    <xs:annotation>
      <xs:documentation>Time Duration in a simple sortable version. In units of second with fractional part allowing arbitrary resolution.</xs:documentation>
      <xs:appinfo>
        <units>seconds</units>
      </xs:appinfo>
      <!-- constraint: developers should not populate this element with more than 6 - 9 fractionDigits, e.g., 3.123456 or 0.123 -->
    </xs:annotation>
    <xs:restriction base="xs:double"/>
  </xs:simpleType>

  <xs:simpleType name="EventNumber">
    <xs:annotation>
      <xs:documentation>Event Number: uniquely identify event</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string"/>
  </xs:simpleType>

  <xs:simpleType name="ErrorType">
    <xs:annotation>
      <xs:documentation>uniquely identify type of error</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:unsignedInt"/>
  </xs:simpleType>

  <xs:simpleType name="ErTime">
    <xs:annotation>
      <xs:documentation>????</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:dateTime"/>
  </xs:simpleType>

  <xs:simpleType name="LogType">
    <xs:annotation>
      <xs:documentation>
        Log Type: the first set upto and including CUSTOM_SERVICE are associated with operational code, i.e., actual transaction processing.
        These operational related enums can be enabled by user defined dymnaic matches within operation code, e.g., source IP-address within HTTP input server.
        Enumeration after CUSTOM_SERVICE are associated with CBR infrastructure (OAM) functionality. These enums only make sense to be explicitly enabled by 
        administrator commands that apply to the entire CBR implementation, i.e., no user defined dynamic matches within operation transaction processing.
      </xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <!-- the following enums are operational plane, i.e., passed with transaction as it is processed, -->
      <xs:enumeration value="INPUT_SERVER">
        <xs:annotation>
          <xs:documentation>Input server (Listener)</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="INVOCATION_AGENT">
        <xs:annotation>
          <xs:documentation>Any entry that is triggered via a BEPL invoke menchanism, e.g., built-in services, Output Server (Senders)</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="WFL_ENGINE">
        <xs:annotation>
          <xs:documentation>Work Flow Language engine (BPEL process engine)</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="NESTED_WF">
        <xs:annotation>
          <xs:documentation>reserved for future usage</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="CUSTOM_SERVICE">
        <xs:annotation>
          <xs:documentation>Integrated agents: application code using Java, Axis and other third party code.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <!-- the following enums are associated with the operational/management code infrastructure -->
      <xs:enumeration value="RTC_BASE_MGMT">
        <xs:annotation>
          <xs:documentation>Runtime Container Infrastructure</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <!-- the following enums are associated with the management plane -->
      <xs:enumeration value="MANAGEMENT_LG"/>
      <xs:enumeration value="NOTIFICATION_LG"/>
      <xs:enumeration value="STATISICS_LG"/>
      <xs:enumeration value="COMMAND_LG"/>
      <xs:enumeration value="CONFIG_MANAGEMENT_LG"/>
      <xs:enumeration value="ERROR_REPORTING_LG"/>
      <xs:enumeration value="MO_LG"/>
      <xs:enumeration value="MONITOR_AND_TEST_LG"/>
      <xs:enumeration value="DATA_AUDIT_LG"/>
      <xs:enumeration value="CLUSTER_LG"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="LogLevel">
    <xs:restriction base="xs:string">
      <xs:enumeration value="FATAL">
        <xs:annotation>
          <xs:documentation>
            Very severe error that will probably lead to process abort and restart. Written to exception log. 
            May also show up as internal-processing-failure wihtin a transaction log entry.
          </xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="ERROR">
        <xs:annotation>
          <xs:documentation>
            Transactional failure, but should not affect underlying process. Written to exception log.
            Should also show up as internal-processing-failure or failure in transaction log entry. 
          </xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="WARNING">
        <xs:annotation>
          <xs:documentation>Indicates a potentially harmful situation. Written to exception log.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="INFO">
        <xs:annotation>
          <xs:documentation>
            Highlight progress at a coarse-grain level. For operational code such as input servers or invocation agents, 
            INFO would map to summary reports to the transaction log. For non-operational code such as OAM, INFO would map to log 
            entries being written to the exception log.
          </xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="VERBOSE">
        <xs:annotation>
          <xs:documentation> 
            Highlight progress at a finer-grain then INFO. 
            Currently, the only components using this logtype is operational code that is mapping start and enhanced transaction log entries.
          </xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="DEBUG">
        <xs:annotation>
          <xs:documentation>Fine-grain information that is must appropriate to debugging an application. Written to exception log.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="TRACE">
        <xs:annotation>
          <xs:documentation>Detail bulk data, e.g., entire received message, internal ESII representation of document, etc. Written to the trace log.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="PolicyName">
    <xs:annotation>
      <xs:documentation>AAA, WS-Security, REST-Security, S/MIME policy name</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:minLength value="1"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="ExtractedIdentity">
    <xs:annotation>
      <xs:documentation>AAA extracted identity</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:minLength value="1"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="ExtractedResource">
    <xs:annotation>
      <xs:documentation>AAA extracted resource</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:minLength value="1"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:complexType name="IpAddress">
    <xs:annotation>
      <xs:documentation>
        Ip address in either Iv4, IPv6 or URI format. However, using IP address is safer because we can resolve actual IP address even when DNS is down or inaccessable.
      </xs:documentation>
    </xs:annotation>
    <xs:choice>
      <xs:element name="v4">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:pattern value="((25[0-5]|2[0-4][0-9]|1?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|1?[0-9]?[0-9])"/>
          </xs:restriction>
          <!-- Datatype for representing IP addresses.  Examples, 129.83.64.255, 64.128.2.71, etc.
               This datatype restricts each field of the IP address to have a value between zero 
               and 255, i.e., [0-255].[0-255].[0-255].[0-255] (Do we want to use hex encoding?)
          -->
        </xs:simpleType>
      </xs:element>
      <xs:element name="v6">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:pattern value="((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(((25[0-5]|2[0-4][0-9]|[01]?[0-9]{1,2})(\.(25[0-5]|2[0-4][0-9]|[01]?[0-9]{1,2})){3})|:[0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){5}(:((25[0-5]|2[0-4][0-9]|[01]?[0-9]{1,2})(\.(25[0-5]|2[0-4][0-9]|[01]?[0-9]{1,2})){3})|((:[0-9A-Fa-f]{1,4}){1,2})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|[01]?[0-9]{1,2})(\.(25[0-5]|2[0-4][0-9]|[01]?[0-9]{1,2})){3}))|((:[0-9A-Fa-f]{1,4}){1,3})|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|[01]?[0-9]{1,2})(\.(25[0-5]|2[0-4][0-9]|[01]?[0-9]{1,2})){3}))|((:[0-9A-Fa-f]{1,4}){1,4})|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|[01]?[0-9]{1,2})(\.(25[0-5]|2[0-4][0-9]|[01]?[0-9]{1,2})){3}))|((:[0-9A-Fa-f]{1,4}){1,5})|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|[01]?[0-9]{1,2})(\.(25[0-5]|2[0-4][0-9]|[01]?[0-9]{1,2})){3}))|((:[0-9A-Fa-f]{1,4}){1,6})|:))|(:(((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|[01]?[0-9]{1,2})(\.(25[0-5]|2[0-4][0-9]|[01]?[0-9]{1,2})){3}))|((:[0-9A-Fa-f]{1,4}){1,7})|:)))"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element name="hostName">
        <xs:simpleType>
          <xs:restriction base="xs:anyURI">
            <xs:minLength value="1"/>
            <xs:maxLength value="256"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
    </xs:choice>
  </xs:complexType>

  <xs:complexType name="IpPort">
    <xs:annotation>
      <xs:documentation>Ip address and port number</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="ipAddress" type="IpAddress"/>
      <xs:element name="port" type="xs:unsignedShort">
        <xs:annotation>
          <xs:documentation>port number being utilized</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>

  <xs:simpleType name="PossibleLogSources">
    <xs:restriction base="xs:string">
      <xs:enumeration value="exception"/>
      <xs:enumeration value="transaction"/>
      <xs:enumeration value="trace"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:complexType name="LogEntryHeader">
    <xs:annotation>
      <xs:documentation>Common Log header for all log types</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="time" type="xs:dateTime">
        <xs:annotation>
          <xs:documentation>Date/time that log entry was generated</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="node" type="xs:string" minOccurs="0">
        <xs:annotation>
          <xs:documentation>Cluster member node name where log entry was generated</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="logSource" minOccurs="0">
        <xs:complexType>
          <xs:annotation>
            <xs:documentation>
              Source of this log entry.
              This element should only be populated by master when it is being returned to the GUI as part of a 
              cluster transaction summary response.
            </xs:documentation>
          </xs:annotation>
          <xs:simpleContent>
            <xs:extension base="PossibleLogSources">
              <xs:attribute name="application" type="xs:string" use="optional">
                <xs:annotation>
                  <xs:documentation>Application name, only present on transaction logs</xs:documentation>
                </xs:annotation>
              </xs:attribute>
            </xs:extension>
          </xs:simpleContent>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="Log">
    <xs:annotation>
      <xs:documentation>Log instance common information for all log types</xs:documentation>
    </xs:annotation>
    <xs:attribute name="type" use="required">
      <xs:annotation>
        <xs:documentation>What type of log is it</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:string">
          <xs:enumeration value="command"/>
          <xs:enumeration value="statistics"/>
          <xs:enumeration value="exception"/>
          <xs:enumeration value="transaction"/>
          <xs:enumeration value="trace"/>
          <xs:enumeration value="transDetail">
            <xs:annotation>
              <xs:documentation>
                Detail transaction drill down. 
                Merge entries from exception and trace logs associated with this transaction!
                Only utilized by interface between Cluster master and GUI.
              </xs:documentation>
            </xs:annotation>
          </xs:enumeration>
          <xs:enumeration value="transSummary">
            <xs:annotation>
              <xs:documentation>
                Transaction Summary.
                Merge of transactions from across cluster. 
                All subEntries except for Listener Summary entry removed.
                Additionally, node and some other elements and attributes added by master merge transformation.
                Only utilized by interface between Cluster master and GUI
              </xs:documentation>
            </xs:annotation>
          </xs:enumeration>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="time" type="xs:dateTime" use="optional">
      <xs:annotation>
        <xs:documentation>Date/time that log file was created</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="application" type="xs:string" use="optional">
      <xs:annotation>
        <xs:documentation>Application name, only present on transaction logs</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="clusterId" type="xs:string" use="optional">
      <xs:annotation>
        <xs:documentation>Cluster name</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="node" type="xs:string" use="optional">
      <xs:annotation>
        <xs:documentation>Cluster member node name</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="ValueString">
    <xs:annotation>
      <xs:documentation>A value string pair</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="value" type="xs:unsignedInt"/>
      <xs:element name="string" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="CompletionTime">
    <xs:annotation>
      <xs:documentation>Time that processing asociated with this transaction completed</xs:documentation>
    </xs:annotation>
    <xs:all>
      <xs:element name="time" type="xs:dateTime"/>
    </xs:all>
  </xs:complexType>

  <xs:complexType name="AlarmSeverity">
    <xs:annotation>
      <xs:documentation>Alarm Severity</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="value" type="xs:unsignedInt"/>
      <xs:element name="string" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
</xs:schema>
